{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/core/core.module.ts","webpack:///src/app/core/header/header.component.ts","webpack:///src/app/core/header/header.component.html","webpack:///src/app/employee/add-employee/add-employee.component.ts","webpack:///src/app/employee/add-employee/add-employee.component.html","webpack:///src/app/employee/edit-employee/edit-employee.component.ts","webpack:///src/app/employee/edit-employee/edit-employee.component.html","webpack:///src/app/employee/employee-detail/employee-detail.component.ts","webpack:///src/app/employee/employee-detail/employee-detail.component.html","webpack:///src/app/employee/employee-form/employee-form.component.ts","webpack:///src/app/employee/employee-form/employee-form.component.html","webpack:///src/app/employee/employee-list/employee-list.component.ts","webpack:///src/app/employee/employee-list/employee-list.component.html","webpack:///src/app/employee/employee-routing.module.ts","webpack:///src/app/employee/employee.module.ts","webpack:///src/app/shared/Utils/storage.service.ts","webpack:///src/app/shared/components/search/search.component.ts","webpack:///src/app/shared/components/search/search.component.html","webpack:///src/app/shared/dataTypes.ts","webpack:///src/app/shared/models/employee.ts","webpack:///src/app/shared/pipes/filter.ts","webpack:///src/app/shared/services/employee.service.ts","webpack:///src/app/shared/services/notification.service.ts","webpack:///src/app/shared/services/shared.service.ts","webpack:///src/app/shared/shared.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","selector","templateUrl","styleUrls","AppModule","timeOut","positionClass","preventDuplicates","declarations","providers","bootstrap","CoreModule","HeaderComponent","sharedService","router","isHomeUrl","events","forEach","event","url","includes","navigate","AddEmployeeComponent","employeeService","notificatioService","employee","Date","now","toString","saveEmployee","addEmployeeClicked","showSuccess","submit","EditEmployeeComponent","editEmployeeClicked","employeeId","updateEmployee","closeModal","show","EmployeeDetailComponent","activatedRoute","params","subscribe","parmas","employees","getEmployee","EmployeeFormComponent","formBuilder","avatars","selectedAvatar","showAvatarDropdown","formEmit","initializeForm","employeeForm","group","name","required","company_name","email","pattern","contact_no","designation","SoftwareDeveloper","avatar","patchValue","key","get","element","target","classList","contains","console","log","emit","value","cancel","host","EmployeeListComponent","searchText","deleteModal","getEmployees","deleteEmployee","hideDeleteModal","path","redirectTo","pathMatch","component","EmployeeRoutingModule","forChild","EmployeeModule","StorageService","localStorage","setItem","JSON","stringify","defaultValue","item","getItem","parse","providedIn","SearchComponent","searchEmit","searchEmployees","Designation","DESIGNATIONS","SeniorSoftwareDeveloper","QualityAssurance","TeamLead","Manager","AVATARS","Employee","data","FilterPipe","items","toLowerCase","filter","it","EmployeeService","allEmployees","getLocalStorage","employeeData","unshift","setLocalStorage","find","index","findIndex","emp","NotificationService","toastr","message","title","success","error","info","warning","SharedService","SharedModule","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n// import { EmployeeListComponent } from './employee/employee-list/employee-list.component';\n// import { EmployeeDetailComponent } from './employee/employee-detail/employee-detail.component';\n\n\n\nconst routes: Routes = [\n]\n\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  constructor() {}\n}\n","\n<app-header></app-header>\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { CoreModule } from './core/core.module';\nimport { SharedModule } from './shared/shared.module';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { ToastrModule } from 'ngx-toastr';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { EmployeeModule } from './employee/employee.module';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    ReactiveFormsModule,\n    EmployeeModule,\n    AppRoutingModule,\n    CoreModule,\n    SharedModule,\n    BrowserAnimationsModule,\n    ToastrModule.forRoot({\n      timeOut: 3000,\n      positionClass: 'toast-top-right',\n      preventDuplicates: true,\n    }),\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HeaderComponent } from './header/header.component';\nimport { SharedModule } from '../shared/shared.module';\n\n\n\n@NgModule({\n  declarations: [HeaderComponent],\n  imports: [\n    CommonModule,\n    SharedModule\n  ],\n  exports: [HeaderComponent]\n})\n\nexport class CoreModule { }\n","//Angular Imports\nimport { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute, NavigationEnd } from '@angular/router';\n\n//Application imports\nimport { SharedService } from '../../shared/services/shared.service';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n\n  isHomeUrl: boolean = true;\n  \n  constructor(public sharedService: SharedService, private router: Router) { }\n\n  //Checking for current route\n  ngOnInit(): void {\n    this.router.events.forEach((event) => {\n      if (event instanceof NavigationEnd) {\n        this.isHomeUrl = this.router.url.includes('employees');\n      }\n    });\n  }\n\n  // Redirect to employees.\n  gotToEmployees() {\n    this.router.navigate(['/']);\n\n  }\n}\n","<header class=\"main-header\">\n    <h2>Employee Management System</h2>\n    <div class=\"navigation-buttons\">\n        <span class=\"header-button go-to-employees\" *ngIf = \"!isHomeUrl\" (click) = \"gotToEmployees()\">Employees</span>\n        <span class=\"header-button create-new-member\" *ngIf = \"isHomeUrl\" (click) = \"sharedService.addEmployeeClicked = true\">+ Add Member</span>\n    </div>\n</header>","//Angular imports\nimport { Component, OnInit } from '@angular/core';\n\n//Application Imports\nimport { EmployeeData } from '../../shared/dataTypes';\nimport { EmployeeFormComponent } from '../employee-form/employee-form.component';\nimport { EmployeeService } from '../../shared/services/employee.service';\nimport { SharedService } from '../../shared/services/shared.service';\nimport { NotificationService } from '../../shared/services/notification.service';\nimport { Employee } from '../../shared/models/employee';\n\n@Component({\n  selector: 'app-add-employee',\n  templateUrl: './add-employee.component.html',\n  styleUrls: ['./add-employee.component.scss']\n})\nexport class AddEmployeeComponent implements OnInit {\n  \n  constructor(private employeeService: EmployeeService,\n              private notificatioService: NotificationService,\n              public sharedService: SharedService) {\n   }\n\n  ngOnInit(): void {}\n\n  submit(employee: Employee) {\n    employee.id = Date.now().toString();\n    this.employeeService.saveEmployee(employee);\n    this.sharedService.addEmployeeClicked = false;\n    this.notificatioService.showSuccess(\"Employee added successfully.\", 'Add Employee')\n  }\n}\n","<div class=\"backdrop\" (click) = \"sharedService.addEmployeeClicked = false\"></div>\n<app-employee-form (formEmit) = \"submit($event)\">\n</app-employee-form>","// Angular Imports\nimport { Component, OnInit, Input } from '@angular/core';\n\n//Application Imports\nimport { EmployeeFormComponent } from '../employee-form/employee-form.component';\nimport { EmployeeService } from '../../shared/services/employee.service';\nimport { SharedService } from '../../shared/services/shared.service';\nimport { EmployeeData } from '../../shared/dataTypes';\nimport { NotificationService } from '../../shared/services/notification.service';\nimport { Employee } from '../../shared/models/employee';\n\n@Component({\n  selector: 'app-edit-employee',\n  templateUrl: './edit-employee.component.html',\n  styleUrls: ['./edit-employee.component.scss']\n})\nexport class EditEmployeeComponent implements OnInit {\n\n  @Input() employeeId: string;\n  \n  constructor(private employeeService: EmployeeService, public sharedService: SharedService, private notificatioService: NotificationService) { }\n\n\n  ngOnInit(): void {\n\n  }\n\n  // Updating employee and close edit modal.\n  submit(employee: Employee) {\n    employee.id = this.sharedService.editEmployeeClicked.employeeId;\n    this.employeeService.updateEmployee(employee);\n    this.closeModal();\n    this.notificatioService.showSuccess(\"Employee Edit successfully.\", 'Edit Employee');\n  }\n\n  //Close edit modal\n  closeModal() {\n    this.sharedService.editEmployeeClicked = {show: false, employeeId: ''};\n  }\n\n}\n","<div class=\"backdrop\" (click) = \"closeModal()\"></div>\n<app-employee-form (formEmit) = \"submit($event)\">\n</app-employee-form>","//Angular imports\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n//Application imports\nimport { Employee } from '../../shared/models/employee';\nimport { EmployeeService } from '../../shared/services/employee.service';\nimport { StorageService } from '../../shared/Utils/storage.service';\n\n@Component({\n  selector: 'app-employee-detail',\n  templateUrl: './employee-detail.component.html',\n  styleUrls: ['./employee-detail.component.scss']\n})\nexport class EmployeeDetailComponent implements OnInit {\n\n  employee: Employee;\n\n  constructor(private activatedRoute: ActivatedRoute,\n              private employeeService: EmployeeService) { }\n\n  //Getting employee id from route and fetching record for that ID.\n  ngOnInit(): void {\n    this.activatedRoute.params.subscribe((parmas) => {\n      const employeeId: string = parmas['id'];\n      this.employeeService.employees();\n      this.employee = this.employeeService.getEmployee(employeeId);\n    })\n  }\n}\n","<div class=\"employee-detail-container\">\n        <div class=\"employee-details\" *ngIf=\"employee; else noResult\">\n          <div class=\"employee-image\" id=\"employee-image\">\n            <img [src]=\"employee.avatar\" alt=\"employee.name\" />\n          </div>\n          <div class=\"employee-info\" id=\"employee-info\">\n            <div>\n                <label>Id: </label>\n                 {{ employee.id }}\n            </div>\n            <div>\n                <label>Name: </label>\n                 {{ employee.name }}\n            </div>\n            <div><label>Email: </label> {{ employee.email }}</div>\n            <div><label>Company Name: </label> {{ employee.company_name }}</div>\n            <div><label>Contact Number: </label> {{ employee.contact_no }}</div>\n            <div><label>Designation: </label> {{ employee.designation }}</div>\n          </div>\n        </div>\n        <ng-template #noResult>\n          <h2 class=\"no-result\">Result not found</h2>\n        </ng-template>\n      \n      </div>","//Angular Imports\nimport { Component, OnInit, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControl, AbstractControl } from '@angular/forms';\n\n//Application Imports\nimport { SharedService } from '../../shared/services/shared.service';\nimport { Designation, DESIGNATIONS, EmployeeData, AVATARS } from '../../shared/dataTypes';\nimport { EmployeeService } from '../../shared/services/employee.service';\nimport { Employee } from '../../shared/models/employee';\n\n@Component({\n  selector: 'app-employee-form',\n  templateUrl: './employee-form.component.html',\n  styleUrls: ['./employee-form.component.scss'],\n  host: {\n    '(document:click)': 'onClick($event)'\n  }\n})\nexport class EmployeeFormComponent implements OnInit {\n\n  employeeForm: FormGroup;\n  avatars = AVATARS;\n  selectedAvatar = AVATARS[0];\n  showAvatarDropdown = false;\n  @Output() formEmit = new EventEmitter<Employee>()\n\n  constructor(public sharedService: SharedService,\n              private formBuilder: FormBuilder,\n              private employeeService: EmployeeService) { }\n\n\n\n  //Initialized form for add and edit both cases\n  ngOnInit(): void {\n    this.initializeForm();\n  }\n\n  //Prepare form for add and edit and in case of edit set values in form.\n  initializeForm() {\n    this.employeeForm = this.formBuilder.group({\n      name: [null, Validators.required],\n      company_name: [null, Validators.required],\n      email: [null, [Validators.required, Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\")]],\n      contact_no: [null, [Validators.required, Validators.pattern(\"[0-9]{10}\")]],\n      designation: [Designation.SoftwareDeveloper],\n      avatar: [null],\n    });\n    const employeeId = this.sharedService.editEmployeeClicked.employeeId;\n    if(employeeId) {\n      const employee = this.employeeService.getEmployee(employeeId);\n      this.selectedAvatar = employee.avatar;\n      this.employeeForm.patchValue(employee);\n    }\n  }\n\n\n  // get designations\n  get designations(): Designation[] {\n    return DESIGNATIONS;\n  }\n\n  // getting form control on the basis of key\n  getFormControl(key): AbstractControl {\n    return this.employeeForm.get(key);\n  }\n  \n  //Select avatar\n  selectAvatar(avatar) {\n    this.showAvatarDropdown = false;\n     this.selectedAvatar = avatar;\n  }\n\n  //Checking if click on avatar select box header, then shows dropdown.\n  onClick(event) {\n    const element = event.target;\n    if ((element.classList.contains('avatarRow'))) {\n      this.showAvatarDropdown = !this.showAvatarDropdown;\n    }\n  }\n\n  submit() {\n    console.log(this.employeeForm)\n    this.formEmit.emit(this.employeeForm.value);\n  }\n\n  //cancel dialog\n  cancel() {\n    if(this.sharedService.editEmployeeClicked.employeeId) {\n      this.sharedService.editEmployeeClicked = {show: false, employeeId: ''};\n    } else {\n      this.sharedService.addEmployeeClicked = false\n    }\n  }\n}","<div class=\"employee-modal\">\n    <h1 class=\"employee-modal-title\">{{(sharedService.editEmployeeClicked?.employeeId ? 'Edit ': 'Add ')}} Employee</h1>\n    <div class=\"employee-form\">\n        <form [formGroup]=\"employeeForm\">\n            <div class = \"input-block\">\n                    <!-- <div class=\"dropdown\">\n                            <button (click) =\"showHideDropdown()\" class=\"dropbtn\">Dropdown</button>\n                            <div id=\"myDropdown\" class=\"dropdown-content\" *ngIf = \"showDropdown\">\n                              <a href=\"#home\">Home</a>\n                              <a href=\"#about\">About</a>\n                              <a href=\"#contact\">Contact</a>\n                            </div>\n                          </div> -->\n                <label for=\"name\">Name *</label>\n                <input formControlName=\"name\" type=\"text\" id=\"name\">\n                <div *ngIf=\"!getFormControl('name').valid && getFormControl('name').touched\" class=\"invalid-feedback\">\n                    <div *ngIf=\"getFormControl('name').errors.required\">First Name is required</div>\n                </div>\n            </div>\n            <div class = \"input-block\">\n                <label for=\"company_name\">Company Name *</label>\n                <input formControlName=\"company_name\" type=\"text\" id=\"company-name\">\n                <div *ngIf=\"!getFormControl('company_name').valid && getFormControl('company_name').touched\" class=\"invalid-feedback\">\n                        <div *ngIf=\"getFormControl('company_name').errors.required\">Company Name is required</div>\n                    </div>\n            </div>\n            <div class=\"input-block\">\n                <label for=\"email\">E-Mail *</label>\n                <input formControlName=\"email\" type=\"email\" id=\"email\">\n                <div *ngIf=\"!getFormControl('email').valid && getFormControl('email').touched\" class=\"invalid-feedback\">\n                        <div *ngIf=\"getFormControl('email').errors.required\">Email is required</div>\n                        <div *ngIf=\"getFormControl('email').errors.pattern\">Email should be in correct format</div>\n                </div>\n            </div>\n            <div class=\"input-block\">\n                <label for=\"contact_no\">Contact Number *</label>\n                <input formControlName=\"contact_no\" type=\"text\" id=\"contact_no\">\n                <div *ngIf=\"!getFormControl('contact_no').valid && getFormControl('contact_no').touched\" class=\"invalid-feedback\">\n                        <div *ngIf=\"getFormControl('contact_no').errors.required\">Contact Number is required</div>\n                        <div *ngIf=\"getFormControl('contact_no').errors.pattern\">Contact Number should be in correct format</div>\n                    </div>\n            </div>\n            <div class=\"input-block flexRow\">\n                    <div class=\"halfWidth avatarRowGroup\">\n                            <label >Avatar *</label>\n                            <div class=\"avatarRow\">\n                                <span><img [src]=\"selectedAvatar\"><input type=\"text\" formControlName = \"avatar\" [(ngModel)] = \"selectedAvatar\"  style=\"display: none\"></span>\n                                <ul *ngIf = \"showAvatarDropdown\">\n                                    <li *ngFor = \"let avatar of avatars\" (click) = \"selectAvatar(avatar)\"><img [src]=\"avatar\"></li>\n                                </ul>\n                            </div>\n                    </div>\n\n                    <div class=\"spacer-h\"></div>\n\n                <div class=\"halfWidth designationRowGroup\">\n                        <label for=\"designation\">Designation *</label>\n                        <select formControlName=\"designation\" id=\"designation\">\n                            <option *ngFor = \"let dsgn of designations\" [value]=\"dsgn\">{{dsgn}}</option>\n                        </select>\n                        <div *ngIf=\"!getFormControl('designation').valid && getFormControl('designation').touched\" class=\"invalid-feedback\">\n                                <div *ngIf=\"getFormControl('designation').errors.required\">Designation is required</div>\n                            </div>\n                </div>\n            </div>\n            <div class=\"employee-modal-actions\">\n                    <button class=\"employee-modal-action employee-modal-action-submit\" [disabled]=\"!employeeForm.valid\" (click) = \"submit()\">Add</button>\n                    <button class=\"employee-modal-action employee-modal-action-cancel\" (click)=\"cancel()\" type=\"button\">Cancel</button>\n            </div>\n        </form>\n    </div>\n\n</div>\n","//Angular imports\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n//Application Imports\nimport { Employee } from '../../shared/models/employee';\nimport { EmployeeService } from '../../shared/services/employee.service';\nimport { SharedService } from '../../shared/services/shared.service';\nimport { NotificationService } from '../../shared/services/notification.service';\n\n@Component({\n  selector: 'app-employee-list',\n  templateUrl: './employee-list.component.html',\n  styleUrls: ['./employee-list.component.scss']\n})\nexport class EmployeeListComponent implements OnInit {\n\n  employees: Employee[] = [];\n  searchText: string = '';\n  deleteModal = {show: false, id: ''};\n\n  constructor(private employeeService: EmployeeService,\n              private notificatioService: NotificationService,\n              public sharedService: SharedService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.getEmployees();\n  }\n\n  //Fetch Employees from local storage\n  getEmployees() {\n    this.employees = this.employeeService.employees();\n  }\n\n  //Show delete modal\n  showDeleteModal(employeeId) {\n    this.deleteModal.show = true;\n    this.deleteModal.id = employeeId;\n  }\n\n  //Hide Delete modal\n  hideDeleteModal() {\n    this.deleteModal = {show: false, id: ''};\n  }\n\n  //Delete Employee from local stoarge and get emplyees again.\n  deleteEmployee() {\n    this.employeeService.deleteEmployee(this.deleteModal.id);\n    this.notificatioService.showSuccess(\"Employee Delete successfully.\", 'Delete Employee');\n    this.getEmployees();\n    this.hideDeleteModal();\n  }\n\n  //Show update employee popup.\n  editEmployee(employeeId: string) {\n    this.sharedService.editEmployeeClicked.show = true;\n    this.sharedService.editEmployeeClicked.employeeId = employeeId;\n  }\n\n  //Redirect to Employee detail\n  employeeDetail(employeeId) {\n    this.router.navigate(['/employee', employeeId]);\n  }\n}\n","<div class=\"employee-list\">\n    <div *ngIf=\"deleteModal?.show\" (click)=\"hideDeleteModal()\" class=\"backdrop\"></div>\n    <app-search *ngIf = \"employees.length > 0\" (searchEmit)=\"searchText = $event\"></app-search>\n    <div class=\"table-users\" *ngIf = \"employees.length > 0; else noResult\">\n        <table cellspacing=\"0\">\n            <tr>\n                <th></th>\n                <th>Id</th>\n                <th>Name</th>\n                <th>Company Name</th>\n                <th>Email</th>\n                <th>Contact</th>\n                <th>Designation</th>\n                <th>Action</th>\n            </tr>\n\n            <tr *ngFor=\"let employee of employees | filter: searchText\">\n                <td>\n                    <img [src]=\"employee.avatar\">\n                </td>\n                <td>{{employee.id}}</td>\n                <td>{{employee.name}}</td>\n                <td>{{employee.company_name}}</td>\n                <td>{{employee.email}}</td>\n                <td>{{employee.contact_no}}</td>\n                <td>{{employee.designation}}</td>\n                <td>\n                    <span class=\"action-button\" (click)=\"editEmployee(employee.id)\">\n                        <i class=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i>\n                    </span>\n                    <span class=\"action-button\" (click)=\"showDeleteModal(employee.id)\">\n                        <i class=\"fa fa-trash-o\" aria-hidden=\"true\"></i>\n                    </span>\n                    <span class=\"action-button\" (click)=\"employeeDetail(employee.id)\">\n                        <i class=\"fa fa-info-circle\" aria-hidden=\"true\"></i>\n                    </span>\n                </td>\n\n            </tr>\n        </table>\n    </div>\n    <ng-template #noResult>\n        <h2 class=\"no-result\">Result not found</h2>\n    </ng-template>\n</div>\n<app-add-employee *ngIf=\"sharedService.addEmployeeClicked\"></app-add-employee>\n<app-edit-employee *ngIf=\"sharedService.editEmployeeClicked?.show\"></app-edit-employee>\n<div class=\"employee-delete-modal\" *ngIf=\"deleteModal?.show\">\n    <h1 class=\"employee-delete-modal-title\">You want to delete?</h1>\n\n    <div class=\"employee-modal-actions\">\n        <button class=\"employee-modal-action employee-modal-action-submit\" (click)=\"deleteEmployee()\">Yes</button>\n        <button class=\"employee-modal-action employee-modal-action-cancel\" (click)=\"hideDeleteModal()\">No</button>\n    </div>\n</div>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { EmployeeListComponent } from './employee-list/employee-list.component';\nimport { EmployeeDetailComponent } from './employee-detail/employee-detail.component';\n\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'employees', pathMatch: 'full' },\n  { path:\"employees\", component:EmployeeListComponent },\n  { path:\"employee/:id\", component: EmployeeDetailComponent },\n  { path:\"**\", redirectTo:'employees' },\n]\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class EmployeeRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { EmployeeRoutingModule } from './employee-routing.module';\nimport { EmployeeFormComponent } from './employee-form/employee-form.component';\nimport { EditEmployeeComponent } from './edit-employee/edit-employee.component';\nimport { AddEmployeeComponent } from './add-employee/add-employee.component';\nimport { EmployeeDetailComponent } from './employee-detail/employee-detail.component';\nimport { EmployeeListComponent } from './employee-list/employee-list.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n\n@NgModule({\n  declarations: [\n    EmployeeListComponent,\n    EmployeeDetailComponent,\n    AddEmployeeComponent,\n    EditEmployeeComponent,\n    EmployeeFormComponent\n  ],\n  imports: [\n    CommonModule,\n    SharedModule,\n    FormsModule,\n    ReactiveFormsModule,\n    EmployeeRoutingModule\n  ]\n})\nexport class EmployeeModule { }\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageService {\n\n  constructor() { }\n\n  public static setLocalStorage(key, value) {\n    localStorage.setItem(key, JSON.stringify(value));\n  }\n\n  public static getLocalStorage(key, defaultValue = null) {\n    const item = localStorage.getItem(key);\n    return item ? JSON.parse(item) : defaultValue;\n  }\n}\n","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-search',\n  templateUrl: './search.component.html',\n  styleUrls: ['./search.component.scss']\n})\nexport class SearchComponent implements OnInit {\n\n  searchText: string = '';\n  @Output() searchEmit: EventEmitter<string> = new EventEmitter();\n  \n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  //Emit search text for parent components.\n  searchEmployees() {\n    this.searchEmit.emit(this.searchText);\n  }\n\n}\n","<div class=\"search-employees\">\n        <input type=\"search\"\n               class=\"search-employees-input\"\n               placeholder=\"Search\"\n               name=\"search\"\n               [(ngModel)] = \"searchText\"\n               autocomplete=\"off\"\n               (input)=\"searchEmployees()\">\n        <button class=\"search-employees-button\"><i class=\"fa fa-search search-icon\" aria-hidden=\"true\"></i></button>\n      </div>","\nexport interface EmployeeData {\n    id: string;\n    name: string;\n    company_name: string;\n    email: string;\n    contact_no: string;\n    designation: Designation; \n    avatar?: string; \n  }\n\n  export enum Designation {\n      SoftwareDeveloper =  'Software Developer',\n      SeniorSoftwareDeveloper =  'Senior Software Developer',\n      QualityAssurance =  'Quality Assurance',\n      TeamLead =  'Team Lead',\n      Manager =  'Manager',\n  }\n\n  export const DESIGNATIONS  = [Designation.SoftwareDeveloper, Designation.SeniorSoftwareDeveloper, Designation.QualityAssurance, Designation.TeamLead, Designation.Manager];\n\n  export const AVATARS = ['assets/images/software-developer.jpg', 'assets/images/senior-developer.png', 'assets/images/QA.png', 'assets/images/team-lead.jpg', 'assets/images/manager.jpg'];","import { EmployeeData, Designation } from '../dataTypes';\n\nexport class Employee implements EmployeeData {\n    id: string;\n    name: string;\n    company_name: string;\n    email: string;\n    contact_no: string;\n    designation: Designation; \n    avatar?: string; \n    constructor(data: EmployeeData) {\n        this.id = data.id;\n        this.name = data.name;\n        this.company_name = data.company_name;\n        this.email = data.email;\n        this.contact_no = data.contact_no;\n        this.designation = data.designation;\n        this.avatar = data.avatar;\n    }\n}\n","\nimport { Pipe, PipeTransform } from '@angular/core';\n@Pipe({\n    name: 'filter'\n})\nexport class FilterPipe implements PipeTransform {\n    transform(items: any[], searchText: string): any[] {\n        if (!items) return [];\n        if (!searchText) return items;\n        searchText = searchText.toLowerCase();\n        return items.filter(it => {\n            return (it.name.toLowerCase().includes(searchText) || it.id.toLowerCase().includes(searchText) || it.email.toLowerCase().includes(searchText));\n        });\n    }\n}","//Angular imports\nimport { Injectable } from '@angular/core';\n\n//Application imports\nimport { Employee } from '../models/employee';\nimport { Designation, EmployeeData } from '../dataTypes';\nimport {StorageService} from '../Utils/storage.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmployeeService {\n\n  private allEmployees: Employee[] = [];\n\n  constructor() { }\n\n\n  // Get All employees from local storage\n  employees(): Employee[] {\n    this.allEmployees = StorageService.getLocalStorage('employees', []);\n    return this.allEmployees;\n  }\n\n  // Save employee in local storage\n  saveEmployee(employeeData) {\n      this.allEmployees.unshift(new Employee(employeeData));\n      StorageService.setLocalStorage('employees', this.allEmployees);\n  }\n\n  //Delete employee from local storage\n  deleteEmployee(employeeId: string) {\n    this.allEmployees = this.allEmployees.filter(employee => employee.id != employeeId);\n    StorageService.setLocalStorage('employees', this.allEmployees);\n  }\n\n  // Get employee by employee id fromlocal storage\n  getEmployee(employeeId: string) {\n    return this.allEmployees.find(employee => employee.id == employeeId);\n  }\n\n  //Update Employee\n  updateEmployee(employee: Employee) {\n    const index = this.allEmployees.findIndex((emp) => emp.id === employee.id);\n    this.allEmployees[index] = employee\n    StorageService.setLocalStorage('employees', this.allEmployees);\n  }\n}\n","// ANgular imports\nimport { Injectable } from '@angular/core';\n\n//Third party imports\nimport { ToastrService } from 'ngx-toastr';\n  \n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n  \n  constructor(private toastr: ToastrService) { }\n  \n  // show success toaster message\n  showSuccess(message, title){\n      this.toastr.success(message, title)\n  }\n  \n  // show Error toaster message\n  showError(message, title){\n      this.toastr.error(message, title)\n  }\n  \n  // show Info toaster message\n  showInfo(message, title){\n      this.toastr.info(message, title)\n  }\n  \n  // show warning toaster message\n  showWarning(message, title){\n      this.toastr.warning(message, title)\n  }\n  \n}","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SharedService {\n \n  // Add employee button is clicked or not\n  addEmployeeClicked = false;\n  \n  // Edit employee button is clicked or not\n  editEmployeeClicked = {employeeId: '', show: false}\n\n  constructor() { }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { EmployeeService } from './services/employee.service';\nimport { SharedService } from './services/shared.service';\nimport { FilterPipe } from './pipes/filter';\nimport { SearchComponent } from './components/search/search.component';\nimport { FormsModule } from '@angular/forms';\nimport { NotificationService } from './services/notification.service';\n\n\n\n@NgModule({\n  declarations: [\n    FilterPipe,\n    SearchComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  providers: [EmployeeService, SharedService, NotificationService],\n  exports: [FilterPipe, SearchComponent]\n})\nexport class SharedModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}